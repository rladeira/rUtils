% Generated by roxygen2 (4.1.1.9000): do not edit by hand
% Please edit documentation in R/loop.until.done.R
\name{loop.until.done}
\alias{loop.until.done}
\title{Error Swallower}
\usage{
loop.until.done(func, ...)
}
\arguments{
\item{func}{function to be monitored and restarted if some
unexpected error happens.}

\item{...}{additional paramaters to be delegated to \code{func}.}
}
\description{
Recursive helper function to reinvoke other function
passed as parameter if some unexpected error occurs.
However, if the invoked function is buggy and always throws some
error in its internal execution, it'll generate a infinite
loop. So be careful and just use this function to handle
errors when exceptions seldom occur. For instance, it would
be useful in some function which communicates over a network
and thus depends on external resources that could fail
unexpectedly.
}
\examples{
get.some.resource.in.network.mock <- function(param1, param2) {}

 loop.until.done <- function(
   func = get.some.resource.in.network.mock,
   param1 = param1,
   param2 = param2)
}

